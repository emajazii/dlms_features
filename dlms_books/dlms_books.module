<?php
/**
 * @file
 * Code for the DLMS Books feature.
 */

include_once('dlms_books.features.inc');

/**
 *Implements hook_form_alter()
 *
 */
function dlms_books_form_alter(&$form, &$form_state, $form_id) {
  // disable the date fields in the borrow return form
  if ($form_id == 'borrow_return_node_form') {
    $fields = field_info_fields();
    foreach ($fields as $name => $field) {
      if ($field['type'] == 'datetime') {
        if ($date_field = &$form[$name]) {
            $date_field['und']['#disabled'] = TRUE;
            //$date_field['und']['#printed'] = TRUE;
            //$date_field['und']['#description'] = t('You can not edit this field values are calculated');
        }
      }
    }
  }
  
  // disable the Qty available field in the book create/edit form
  if ($form_id == 'book_node_form') {
    $form['field_book_available']['und']['#disabled'] = TRUE;
    $form['field_book_available']['und']['#description'] = t('You can not edit this field; value is calculated');
  }
}

/**
 *Implements hook_node_validate()
 *
 */
function dlms_books_node_validate($node, $form, &$form_state) {
  if ($node->type == 'borrow_return') {
    $ref = node_load($node->field_book_title['und'][0]['nid']);
    
    // ensure a reference material is not borrowed
    if ($ref->field_book_reference['und'][0]['value'] == 1) {
      form_set_error('field_book_title', t('This book is a reference material it cannot be borrowed. ' . l('Return to book page', 'node/' . $ref->nid)));
    }
    
    // ensure that an unborrowed book cannot be returned
    if (!$node->nid) {
      if ($node->field_book_status['und'][0]['value'] == 'returned') {
        form_set_error('field_book_status', t('You cannot return an unborrowed book'));
      }
    }
  }
}